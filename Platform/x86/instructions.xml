<?xml version="1.0" encoding="UTF-8"?>
<ISAConfig>
	<CoreSize>32</CoreSize>
	<ExtendVectorSize>128</ExtendVectorSize>
	<CompressedSize>16</CompressedSize>
	
	<Instructions>
		<Opcode>
			<Mnemonic>NOP</Mnemonic>
			<hex>0x0000</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>0</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>No Operations</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>STI</Mnemonic>
			<hex>0x0001</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>0</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>No Operations</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>CLI</Mnemonic>
			<hex>0x0002</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>0</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>No Operations</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>PUSH</Mnemonic>
			<hex>0x0003</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Push given Element to Stack</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>POP</Mnemonic>
			<hex>0x0004</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>POP Element from Stack to Variable or Register</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>PUSHF</Mnemonic>
			<hex>0x0005</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>PUSH all Flags to Stack</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>POPF</Mnemonic>
			<hex>0x0006</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>POP all flags to Adress</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>PEEK</Mnemonic>
			<hex>0x0007</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Get Element from Stack, without remove it</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>SHL</Mnemonic>
			<hex>0x0008</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Shift given Adress to N Left - SHL R0, 1d, R1 - SHL VALUE, N, ERG ( ERG = VALUE (left) N)</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>SHR</Mnemonic>
			<hex>0x0009</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Shift given Adress to N right  - SHR R0, 1d, R1 - SHR VALUE, N, ERG ( ERG = VALUE (right) N)</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HLT</Mnemonic>
			<hex>0x000A</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>0</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Halt the Core, interrupts are running</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>LCK</Mnemonic>
			<hex>0x000B</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Lock a adress</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>UCK</Mnemonic>
			<hex>0x000C</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Unlock a adress</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JMP</Mnemonic>
			<hex>0x1000</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress.</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JMPE</Mnemonic>
			<hex>0x1001</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when the 2 given Args equel is to Adress Arg3</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JMPNE</Mnemonic>
			<hex>0x1002</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when the 2 given Args not equel is to Adress Arg3</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JMPG</Mnemonic>
			<hex>0x1003</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when the First greater second is to Adress Arg3</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JMPS</Mnemonic>
			<hex>0x1004</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when the First smaller second is to Adress Arg3</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JC</Mnemonic>
			<hex>0x1005</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when carry flag set to Adress Arg1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JCN</Mnemonic>
			<hex>0x1006</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when carry flag not set to Adress Arg1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JS</Mnemonic>
			<hex>0x1007</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when signed flag set to Adress Arg1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>JSN</Mnemonic>
			<hex>0x1008</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Jump to Adress, when signed flag not set to Adress Arg1</Description>
		</Opcode>

		<Opcode>
			<Mnemonic>ADD</Mnemonic>
			<hex>0x0010</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Add A with B and save it in ERG . ADD A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>SUB</Mnemonic>
			<hex>0x0011</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>SUB A with B and save it in ERG . SUB A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>DIV</Mnemonic>
			<hex>0x0012</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>4</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>DIV A with B and save it in ERG . DIV A, B, ERG, REST</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>MUL</Mnemonic>
			<hex>0x0013</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>MUL A with B and save it in ERG . MUL A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>EXP</Mnemonic>
			<hex>0x0014</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Exponent to ERG from A ^ B, EXP A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>SQR</Mnemonic>
			<hex>0x0015</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>SQRTF to ERG from A ^ B, SQR A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>CALL</Mnemonic>
			<hex>0x0016</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Call ein unterprogramm</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>RET</Mnemonic>
			<hex>0x0017</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>0</ParamCount>
			<AutoCalcSize>false</AutoCalcSize>
			<SizeInBytes>0</SizeInBytes>
			<Description>Return from subrotiune</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>INV</Mnemonic>
			<hex>0x0018</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Invetiert ein Integer</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>STO</Mnemonic>
			<hex>0x0019</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>set a adress to 1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>INC</Mnemonic>
			<hex>0x0019</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>DEC R0; R0++</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>DEC</Mnemonic>
			<hex>0x001A</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>DEC R0; R0--</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>CLR</Mnemonic>
			<hex>0x001B</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>CLR R0; R0 = 0</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>MOV</Mnemonic>
			<hex>0x001C</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>MOV R0, R1, R2</Description>
		</Opcode>

		<Opcode>
			<Mnemonic>OR</Mnemonic>
			<hex>0x0020</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>OG R0, R1, R2 - R2 = R0 OR R1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>NOR</Mnemonic>
			<hex>0x0021</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>NOG R0, R1, R2 - R2 = R0 NOR R1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>XOR</Mnemonic>
			<hex>0x0022</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>XOR R0, R1, R2 - R2 = R0 XOR R1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>AND</Mnemonic>
			<hex>0x0023</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>AND R0, R1, R2 - R2 = R0 AND R1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>NAND</Mnemonic>
			<hex>0x0024</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>NAND R0, R1, R2 - R2 = R0 NAND R1</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>NOT</Mnemonic>
			<hex>0x0025</hex>
			<ValueSize>4</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>2</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>NOT R0, R1 - R1 = NOT R0</Description>
		</Opcode>

		<!-- IEE  -->
		<Opcode>
			<Mnemonic>FADD</Mnemonic>
			<hex>0x0030</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float Add only register F0-F4</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FSUB</Mnemonic>
			<hex>0x0031</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float sub only register F0-F4</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FMUL</Mnemonic>
			<hex>0x0032</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float mul only register F0-F4</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FDIV</Mnemonic>
			<hex>0x0033</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float div only register F0-F4</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FINC</Mnemonic>
			<hex>0x0034</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float inc only register F0-F4</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FDEC</Mnemonic>
			<hex>0x0035</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float dec only register F0-F4</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FMOV</Mnemonic>
			<hex>0x0036</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>2</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Float mov FMOV 2.5f, F0</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>FEXP</Mnemonic>
			<hex>0x0037</hex>
			<ValueSize>8</ValueSize>
			<OpCodeSize>4</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>FEXP F0, F1, F2 - F2 = F0 ^ F1</Description>
		</Opcode>
		
		<!-- Half  -->
		<Opcode>
			<Mnemonic>HPUSH</Mnemonic>
			<hex>0xA003</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Push given Element to Stack</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HPOP</Mnemonic>
			<hex>0xA004</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>POP Element from Stack to Variable or Register</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HPUSHF</Mnemonic>
			<hex>0xA005</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>PUSH all Flags to Stack</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HPOPF</Mnemonic>
			<hex>0xA006</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>POP all flags to Adress</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HPEEK</Mnemonic>
			<hex>0xA007</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Get Element from Stack, without remove it</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HSHL</Mnemonic>
			<hex>0xA008</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Shift given Adress to N Left - SHL R0, 1d, R1 - SHL VALUE, N, ERG ( ERG = VALUE (left) N)</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HSHR</Mnemonic>
			<hex>0xA009</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Shift given Adress to N right  - SHR R0, 1d, R1 - SHR VALUE, N, ERG ( ERG = VALUE (right) N)</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HLCK</Mnemonic>
			<hex>0xA00B</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Lock a adress</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HUCK</Mnemonic>
			<hex>0xA00C</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>1</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Unlock a adress</Description>
		</Opcode>
		
		<Opcode>
			<Mnemonic>HADD</Mnemonic>
			<hex>0xA010</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Add A with B and save it in ERG . ADD A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HSUB</Mnemonic>
			<hex>0xA011</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>SUB A with B and save it in ERG . SUB A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HDIV</Mnemonic>
			<hex>0xA012</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>4</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>DIV A with B and save it in ERG . DIV A, B, ERG, REST</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HMUL</Mnemonic>
			<hex>0xA013</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>MUL A with B and save it in ERG . MUL A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HEXP</Mnemonic>
			<hex>0xA014</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>Exponent to ERG from A ^ B, EXP A, B, ERG</Description>
		</Opcode>
		<Opcode>
			<Mnemonic>HSQR</Mnemonic>
			<hex>0xH015</hex>
			<ValueSize>2</ValueSize>
			<OpCodeSize>2</OpCodeSize>
			<ParamCount>3</ParamCount>
			<AutoCalcSize>true</AutoCalcSize>
			<Description>SQRTF to ERG from A ^ B, SQR A, B, ERG</Description>
		</Opcode>
		

	</Instructions>

	<Registers>
		<Register>
			<Name>R0</Name>
			<Type>General</Type>
			<Address>0xA0000000</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R1</Name>
			<Type>General</Type>
			<Address>0xA0000004</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R2</Name>
			<Type>General</Type>
			<Address>0xA0000008</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R3</Name>
			<Type>General</Type>
			<Address>0xA000000C</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R4</Name>
			<Type>General</Type>
			<Address>0xA0000010</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R5</Name>
			<Type>General</Type>
			<Address>0xA0000014</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R6</Name>
			<Type>General</Type>
			<Address>0xA0000018</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R7</Name>
			<Type>General</Type>
			<Address>0xA000001C</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R8</Name>
			<Type>General</Type>
			<Address>0xA0000020</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>R9</Name>
			<Type>General</Type>
			<Address>0xA0000024</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>RA</Name>
			<Type>General</Type>
			<Address>0xA0000028</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>RB</Name>
			<Type>General</Type>
			<Address>0xA000002C</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>RC</Name>
			<Type>General</Type>
			<Address>0xA0000030</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>RD</Name>
			<Type>General</Type>
			<Address>0xA0000034</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>RE</Name>
			<Type>StackPointer</Type>
			<Address>0xA0000038</Address>
			<Bits>32</Bits>
		</Register>
		<Register>
			<Name>RF</Name>
			<Type>IP</Type>
			<Address>0xA000003C</Address>
			<Bits>32</Bits>
		</Register>
		<!-- FLAGS-->
		<Register>
			<Name>CF</Name>
			<Type>Flag</Type>
			<Address>0xA0000050</Address>
			<Bits>1</Bits>
		</Register>
		<Register>
			<Name>ZF</Name>
			<Type>Flag</Type>
			<Address>0xA0000052</Address>
			<Bits>1</Bits>
		</Register>
		<Register>
			<Name>UF</Name>
			<Type>Flag</Type>
			<Address>0xA0000053</Address>
			<Bits>1</Bits>
		</Register>
		<Register>
			<Name>OF</Name>
			<Type>Flag</Type>
			<Address>0xA0000054</Address>
			<Bits>1</Bits>
		</Register>
		<Register>
			<Name>SF</Name>
			<Type>Flag</Type>
			<Address>0xA0000055</Address>
			<Bits>1</Bits>
		</Register>
		

		<Register>
			<Name>F0</Name>
			<Type>IEE</Type>
			<Address>0xA0010000</Address>
			<Bits>64</Bits>
		</Register>
		<Register>
			<Name>F1</Name>
			<Type>IEE</Type>
			<Address>0xA0020000</Address>
			<Bits>64</Bits>
		</Register>
		<Register>
			<Name>F2</Name>
			<Type>IEE</Type>
			<Address>0xA0030000</Address>
			<Bits>64</Bits>
		</Register>
		<Register>
			<Name>F3</Name>
			<Type>IEE</Type>
			<Address>0xA0040000</Address>
			<Bits>64</Bits>
		</Register>

		<Register>
			<Name>XM0</Name>
			<Type>EXTENDMATH</Type>
		</Register>
		<Register>
			<Name>XM1</Name>
			<Type>EXTENDMATH</Type>
		</Register>
		<Register>
			<Name>XM2</Name>
			<Type>EXTENDMATH</Type>
		</Register>
		<Register>
			<Name>XM3</Name>
			<Type>EXTENDMATH</Type>
		</Register>
	</Registers>
</ISAConfig>
